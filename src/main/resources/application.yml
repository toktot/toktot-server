spring:
  application:
    name: toktot

  # 데이터베이스 설정
  datasource:
    url: jdbc:postgresql://postgres:5432/toktot_dev
    username: toktot_user
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  # Redis 설정
  data:
    redis:
      host: redis
      port: 6379
      password: ${REDIS_PASSWORD}
      database: 0

  # 이메일 설정
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:3000/kakao/callback

  # 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 25MB
      enabled: true

# 서버 설정
server:
  port: 8080

# JWT 설정
jwt:
  secret: ${JWT_SECRET}
  access-token-expiration: 604800000
  refresh-token-expiration: 604800000

# 로깅 설정 (Spring Boot 3.4+)
logging:
  structured:
    format:
      console: ecs
      file: ecs
    ecs:
      service:
        name: ${spring.application.name}
        version: 1.0.0
        environment: ${spring.profiles.active:dev}
        node-name: ${HOSTNAME:localhost}

  # 로그 레벨 설정
  level:
    com.toktot: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    root: INFO

  # 콘솔 패턴 설정 (개발 환경용)
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"

# 똑똣 커스텀 설정
toktot:
  security:
    cors:
      allowed-origins: http://localhost:3000, https://toktot-client.vercel.app
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      max-age: 3600
      allow-credentials: true
    password:
      strength: 12
  s3:
    bucket-name: ${S3_BUCKET_NAME}
    region: ap-northeast-2
  review:
    session:
      ttl-hours: 24
    image:
      max-count: 5
      max-size-mb: 5
      allowed-types: image/jpeg,image/png

# AWS S3 설정
aws:
  region: ap-northeast-2
  credentials:
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}

# TourAPI 설정
tour-api:
  # 기본 API 설정
  base-url: https://apis.data.go.kr/B551011/KorService2
  service-key: ${TOUR_API_SERVICE_KEY}

  # HTTP 클라이언트 설정
  timeout:
    connection: 5000  # 연결 타임아웃 (5초)
    read: 10000       # 읽기 타임아웃 (10초)

  # API 호출 제한 관리
  rate-limit:
    daily-limit: 1000        # 일일 호출 제한
    warning-threshold: 900   # 경고 임계값 (90%)
    danger-threshold: 950    # 위험 임계값 (95%)

  # 배치 처리 설정
  batch:
    chunk-size: 100         # 청크 단위 처리 크기
    max-retry-count: 3      # 최대 재시도 횟수
    retry-delay-ms: 1000    # 재시도 지연시간 (1초)

  # 스케줄러 설정
  scheduler:
    # 주 1회 데이터 동기화 (일요일 새벽 2시)
    data-sync: "0 0 2 * * SUN"
    # 월 1회 데이터 정리 (매월 1일 새벽 1시)
    cleanup: "0 0 1 1 * ?"

# 모니터링 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized