name: Deploy To Dev Server

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/toktot:dev
            ${{ secrets.DOCKERHUB_USERNAME }}/toktot:dev-${{ github.sha }}

      - name: EC2 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "🚀 Dev 서버 배포 시작..."
            cd toktot-server
            
            # 로컬 브랜치를 dev로 강제 체크아웃하고 origin/dev 기준으로 리셋
            git fetch origin
            git checkout -B dev origin/dev

            # 필요한 디렉토리 생성
            mkdir -p nginx/conf.d
            mkdir -p certbot/www
            mkdir -p certbot/conf

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/toktot:dev

            # 기존 컨테이너 중지
            docker-compose down || true

            # 사용하지 않는 이미지 정리
            docker image prune -f

            # ⭐ 환경변수와 함께 docker-compose 실행 ⭐
            DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}" \
            POSTGRES_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
            KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
            MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" \
            MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" \
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
            AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
            docker-compose up -d

            echo "⏳ 서버 시작 대기 중..."
            sleep 45

            # 환경변수 전달 확인
            echo "🔍 컨테이너 환경변수 확인:"
            docker exec toktot-dev-app env | grep -E "(AWS|S3|JWT)" | head -5 || echo "환경변수 확인 실패"

            # 컨테이너 상태 확인
            echo "📊 컨테이너 상태:"
            docker-compose ps

            # nginx 헬스체크
            echo "🔍 Nginx 헬스체크 실행..."
            if curl -f http://localhost/health; then
              echo "✅ Nginx 정상 동작 확인!"
            else
              echo "❌ Nginx 헬스체크 실패! 로그:"
              docker-compose logs --tail=20 nginx
            fi

            # 애플리케이션 헬스체크 (nginx를 통해)
            echo "🔍 애플리케이션 헬스체크 실행..."
            if curl -f http://localhost/actuator/health; then
              echo "✅ Dev 서버 배포 성공!"
            else
              echo "❌ 애플리케이션 헬스체크 실패! 로그:"
              docker-compose logs --tail=50 app
              exit 1
            fi

            echo "🎉 Dev 서버 배포 완료!"